/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package linkedlist;

import javax.swing.*;

/**
 *
 * @author Mahmoud
 */
public class App extends JFrame {

    LinkList h = new LinkList();
    Dlinkedlist DL = new Dlinkedlist();

    public App() {
        setLookAndFeel();
        initComponents();
        setLocationRelativeTo(null);
        NumAfter.setEnabled(false);
        NameAfter.setEnabled(false);
        insertAfter.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        DLLTBT = new javax.swing.JToggleButton();
        SLLTBT = new javax.swing.JToggleButton();
        Num = new javax.swing.JTextField();
        DeleteFisrt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ObSelec = new javax.swing.JComboBox();
        Name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        deleteLast = new javax.swing.JButton();
        deleteKey = new javax.swing.JButton();
        searchBT = new javax.swing.JButton();
        insertAfter = new javax.swing.JButton();
        NumAfter = new javax.swing.JTextField();
        NameAfter = new javax.swing.JTextField();
        insertFirst = new javax.swing.JButton();
        insertlast = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        Afterche = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Linked List");
        setBackground(new java.awt.Color(240, 255, 255));
        setForeground(java.awt.Color.white);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Enter  :");

        DLLTBT.setText("Doubly LL");
        DLLTBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DLLTBTActionPerformed(evt);
            }
        });

        SLLTBT.setText("Single LL");
        SLLTBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SLLTBTActionPerformed(evt);
            }
        });

        DeleteFisrt.setText("Delete First");
        DeleteFisrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFisrtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Selet the type you want :");

        ObSelec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Integer", "String", "Integer and String" }));
        ObSelec.setSelectedItem(null);
        ObSelec.setName(""); // NOI18N
        ObSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObSelecActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Chosee :");

        deleteLast.setText("Delete Last");
        deleteLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLastActionPerformed(evt);
            }
        });

        deleteKey.setText("Delete Key");
        deleteKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteKeyActionPerformed(evt);
            }
        });

        searchBT.setText("Search");
        searchBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTActionPerformed(evt);
            }
        });

        insertAfter.setText("Insert After");
        insertAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAfterActionPerformed(evt);
            }
        });

        insertFirst.setText("Insert First");
        insertFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertFirstActionPerformed(evt);
            }
        });

        insertlast.setText("Insert Last");
        insertlast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertlastActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        display.setEditable(false);
        display.setColumns(20);
        display.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        Afterche.setText("After :");
        Afterche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AftercheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ObSelec, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SLLTBT)
                                .addGap(4, 4, 4)
                                .addComponent(DLLTBT)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(DeleteFisrt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteKey)
                                .addGap(18, 18, 18)
                                .addComponent(deleteLast, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(Afterche)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NumAfter, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NameAfter, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(insertAfter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(insertFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(insertlast, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)))
                        .addGap(34, 34, 34))))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ObSelec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SLLTBT)
                    .addComponent(DLLTBT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBT))
                .addGap(11, 11, 11)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertlast)
                    .addComponent(insertFirst))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Afterche)
                    .addComponent(NumAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertAfter))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteFisrt)
                    .addComponent(deleteLast)
                    .addComponent(deleteKey)))
        );
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DLLTBT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(SLLTBT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Num, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DeleteFisrt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(ObSelec, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Name, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(deleteLast, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(deleteKey, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(searchBT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(insertAfter, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(NumAfter, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(NameAfter, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(insertFirst, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(insertlast, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Afterche, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertFirstActionPerformed
        if (ObSelec.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Select the Desired data type first");
        }

        if (!SLLTBT.isSelected() && !DLLTBT.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please select a type to begin ");

        }

        if (SLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    h.insertFirst(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        h.insertFirst(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        h.insertFirst(d);
                    }
                }

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());
                    current = current.next;
                }
                display.setText("First " + display.getText() + " ---> Tail");
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Please Enter a number to insert");
            }
        }

        if (DLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);

                    DL.insertFirst(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        DL.insertFirst(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        DL.insertFirst(d);
                    }
                }

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                display.setText("First " + display.getText() + "<---> Tail");
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Please Enter a number to insert");
            }
        }


    }//GEN-LAST:event_insertFirstActionPerformed

    private void DeleteFisrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFisrtActionPerformed
        if (SLLTBT.isSelected()) {
            if (!h.isEmpty()) {
                h.deleteFirst();

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());
                    current = current.next;
                }
                if (!h.isEmpty()) {
                    display.setText("First " + display.getText() + "---> Tail");
                }
            } else if (h.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Linked list is already Empty");
            }
        }
        if (DLLTBT.isSelected()) {
            if (!DL.isEmpty()) {
                DL.deleteFirst();

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                if (!DL.isEmpty()) {
                    display.setText("First " + display.getText() + "<---> Tail");
                }

            } else if (DL.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Linked list is already Empty");
            }
        }
    }//GEN-LAST:event_DeleteFisrtActionPerformed

    private void SLLTBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SLLTBTActionPerformed

        if (SLLTBT.isSelected()) {

            DLLTBT.setSelected(false);
            display.setText(null);

        }
    }//GEN-LAST:event_SLLTBTActionPerformed

    private void DLLTBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DLLTBTActionPerformed

        if (DLLTBT.isSelected()) {

            SLLTBT.setSelected(false);
            display.setText(null);
        }
    }//GEN-LAST:event_DLLTBTActionPerformed

    private void ObSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObSelecActionPerformed
        if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {

            Name.setEnabled(false);
            Num.setEnabled(true);
           
            h.clear();
            DL.clear();
            display.setText(null);
        }
        if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {

            Num.setEnabled(false);
            Name.setEnabled(true);
           
            h.clear();
            DL.clear();
            display.setText(null);
        }
        if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {

            Num.setEnabled(true);
            Name.setEnabled(true);
            
            h.clear();
            DL.clear();
            display.setText(null);
        }

    }//GEN-LAST:event_ObSelecActionPerformed

    private void insertlastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertlastActionPerformed

        if (ObSelec.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Choose the Desired data type first");
        }
        if (SLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    h.insertLast(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        h.insertLast(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        h.insertLast(d);
                    }
                }

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());

                    current = current.next;
                }
                display.setText("First " + display.getText() + "---> Tail");
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Please Enter a number to insert");
            }
        }

        if (DLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);

                    DL.insertLast(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        DL.insertLast(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        DL.insertLast(d);
                    }
                }

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                display.setText("First " + display.getText() + "<---> Tail");
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Please Enter a number to insert");
            }
        }

    }//GEN-LAST:event_insertlastActionPerformed

    private void deleteLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLastActionPerformed
        if (ObSelec.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Choose the Desired data type first");
        }

        if (SLLTBT.isSelected()) {
            if (!h.isEmpty()) {
                h.deleteLast();

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());
                    current = current.next;
                }
                if (!h.isEmpty()) {
                    display.setText("First " + display.getText() + "--->Tail");
                }
            } else if (h.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Singly Linked list is already Empty");
            }
        }

        if (DLLTBT.isSelected()) {
            if (!DL.isEmpty()) {
                DL.deleteLast();

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                if (!DL.isEmpty()) {
                    display.setText("First " + display.getText() + "<---> Tail");
                }

            } else if (DL.isEmpty()) {
                JOptionPane.showMessageDialog(null, " Doubly Linked list is already Empty");
            }
        }
    }//GEN-LAST:event_deleteLastActionPerformed

    private void deleteKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteKeyActionPerformed
        if (ObSelec.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Choose the Desired data type first");
        }

        if (SLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    h.deleteKey(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        h.deleteKey(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        h.deleteKey(d);
                    }
                }

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());

                    current = current.next;
                }
                if (!h.isEmpty()) {
                    display.setText("First " + display.getText() + "---> Tail");
                }
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Nothing left to be deleted");
            }
        }

        if (DLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);

                    DL.deleteKey(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        DL.deleteKey(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        DL.deleteKey(d);
                    }
                }

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                if (!DL.isEmpty()) {
                    display.setText("First " + display.getText() + "<---> Tail");
                }
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Nothing left to be deleted");
            }
        }

    }//GEN-LAST:event_deleteKeyActionPerformed

    private void searchBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTActionPerformed
        if (ObSelec.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Choose the Desired data type first");
        }

        if (SLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    h.find(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        h.find(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        h.find(d);
                    }
                }               
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "you should give me some thing first to look for");
            }
        }

        if (DLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);

                    DL.find(d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        DL.find(d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    try {
                        int l = Integer.parseInt(y);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        DL.find(d);
                    }
                }
                Num.setText(null);
                Name.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "you should give me some thing first to look for");
            }
        }
    }//GEN-LAST:event_searchBTActionPerformed

    private void insertAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAfterActionPerformed
        if (SLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    String m = NumAfter.getText();
                    int k = Integer.parseInt(m);
                    Data key = new Data(k);
                    h.insertAfter(key, d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    String k = NameAfter.getText();
                    try {
                        int l = Integer.parseInt(y);
                        int g = Integer.parseInt(k);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        Data key = new Data(k);
                        h.insertAfter(key, d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    String k = NameAfter.getText();
                    String o = NumAfter.getText();
                    int f = Integer.parseInt(o);
                    try {
                        int l = Integer.parseInt(y);
                        int g = Integer.parseInt(k);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        Data key = new Data(k, f);
                        h.insertAfter(key, d);
                    }
                }

                display.setText(null);
                Link current = h.first;
                while (current != null) {
                    display.setText(display.getText() + "--->" + current.displayLink());
                    current = current.next;
                }
                display.setText("First " + display.getText() + "---> Tail");
                Num.setText(null);
                Name.setText(null);
                NameAfter.setText(null);
                NumAfter.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Can't insert after nothing , it's empty");
            }
        }

        if (DLLTBT.isSelected()) {
            try {
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {
                    String y = Num.getText();
                    int x = Integer.parseInt(y);
                    Data d = new Data(x);
                    String m = NumAfter.getText();
                    int k = Integer.parseInt(m);
                    Data key = new Data(k);
                    DL.insertAfter(key, d);
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {
                    String y = Name.getText();
                    String k = NameAfter.getText();
                    try {
                        int l = Integer.parseInt(y);
                        int g = Integer.parseInt(k);
                        JOptionPane.showMessageDialog(null, "Please Enter a Name");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y);
                        Data key = new Data(k);
                        DL.insertAfter(key, d);
                    }
                }
                if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {
                    String y = Name.getText();
                    String x = Num.getText();
                    int m = Integer.parseInt(x);
                    String k = NameAfter.getText();
                    String o = NumAfter.getText();
                    int f = Integer.parseInt(o);
                    try {
                        int l = Integer.parseInt(y);
                        int g = Integer.parseInt(k);
                        JOptionPane.showMessageDialog(null, "Please Enter a correct Name and ID");
                    } catch (NumberFormatException ex) {
                        Data d = new Data(y, m);
                        Data key = new Data(k, f);
                        DL.insertAfter(key, d);
                    }
                }

                display.setText(null);
                Dlink current = DL.first;
                while (current != null) {
                    display.setText(display.getText() + "<--->" + current.displayLink());
                    current = current.next;
                }
                display.setText("First " + display.getText() + "<---> Tail");
                Num.setText(null);
                Name.setText(null);
                NameAfter.setText(null);
                NumAfter.setText(null);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Can't insert after nothing , it's empty");
            }
        }

    }//GEN-LAST:event_insertAfterActionPerformed

    private void AftercheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AftercheActionPerformed

        if (Afterche.isSelected()) {
           if (ObSelec.getSelectedItem() == ObSelec.getItemAt(0)) {

            
            NameAfter.setEnabled(false);
            NumAfter.setEnabled(true);
           
        }
        if (ObSelec.getSelectedItem() == ObSelec.getItemAt(1)) {

           
            NumAfter.setEnabled(false);
            NameAfter.setEnabled(true);
            
        }
        if (ObSelec.getSelectedItem() == ObSelec.getItemAt(2)) {

            
            NumAfter.setEnabled(true);
            NameAfter.setEnabled(true);
           
           
        }
            
            
            
            insertAfter.setEnabled(true);
        }
        if (!Afterche.isSelected()) {
            NumAfter.setEnabled(false);
            NameAfter.setEnabled(false);
            insertAfter.setEnabled(false);
        }
    }//GEN-LAST:event_AftercheActionPerformed

    public void setLookAndFeel() {
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;
                }

            }

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new App().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Afterche;
    private javax.swing.JToggleButton DLLTBT;
    private javax.swing.JButton DeleteFisrt;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField NameAfter;
    private javax.swing.JTextField Num;
    private javax.swing.JTextField NumAfter;
    private javax.swing.JComboBox ObSelec;
    private javax.swing.JToggleButton SLLTBT;
    private javax.swing.JButton deleteKey;
    private javax.swing.JButton deleteLast;
    private javax.swing.JTextArea display;
    private javax.swing.JButton insertAfter;
    private javax.swing.JButton insertFirst;
    private javax.swing.JButton insertlast;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchBT;
    // End of variables declaration//GEN-END:variables
}
